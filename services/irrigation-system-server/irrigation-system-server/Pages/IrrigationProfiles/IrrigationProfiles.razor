@page "/irrigation-profiles"

<PageTitle>Irrigation-Profiles</PageTitle>

@using IrrigationSystemServer.Models
@using IrrigationSystemServer.Services
@inject IrrigationProfileService IrrigationProfileService
@inject DeviceService DeviceService

<h1>Irrigation-Profiles</h1>

<NavLink class="nav-link" href="add-irrigation-profile">
    <span><span class="oi oi-plus"></span> Add new</span>
</NavLink>



@if (_irrigationProfiles == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Irrigation-Profile Id</th>
            <th>Plant Profile</th>
            <th>Device Id</th>
            <th>Valve Pin</th>
            <th>Sensor Pin</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var irrigationProfile in _irrigationProfiles)
        {
            <tr>
                <td><a href="irrigation-profile/@irrigationProfile.IrrigationProfileId">@irrigationProfile.IrrigationProfileId</a></td>
                <td>@irrigationProfile.PlantProfile!.Name</td>
                <td>@irrigationProfile.DeviceId</td>
                <td>@irrigationProfile.Valve?.PinId (@GetValvePinName(irrigationProfile).Result)</td>
                <td>@irrigationProfile.MoistureSensor?.PinId (@GetSensorPinName(irrigationProfile).Result)</td>
                <td>
                    <a class="text-decoration-none d-block" role="button">
                        <span><span class="oi oi-pencil" aria-hidden="true"></span> Edit</span>
                    </a>
                    <a class="text-decoration-none d-block mt-2" role="button" @onclick="@(e => DeleteIrrigationProfile(irrigationProfile))">
                        <span class="oi oi-trash" aria-hidden="true"></span> Delete
                    </a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<IrrigationProfile>? _irrigationProfiles;

    protected override async Task OnInitializedAsync()
    {
        _irrigationProfiles = await IrrigationProfileService.GetAllIrrigationProfilesAsync();
    }
    
    private async void DeleteIrrigationProfile(IrrigationProfile irrigationProfile)
    {
        await IrrigationProfileService.DeleteIrrigationProfileAsync(irrigationProfile);
        _irrigationProfiles?.Remove(irrigationProfile);
    }

    private async Task<string> GetSensorPinName(IrrigationProfile irrigationProfile)
    {
        if (irrigationProfile.MoistureSensor?.PinId == null)
        {
            return "";
        }
        var device = await DeviceService.GetDeviceByIdAsync(irrigationProfile.DeviceId);
        return device?.Type?.SensorPinMap[irrigationProfile.MoistureSensor.PinId] ?? "unknown";
    }
    
    private async Task<string> GetValvePinName(IrrigationProfile irrigationProfile)
    {
        if (irrigationProfile.Valve?.PinId == null)
        {
            return "";
        }
        var device = await DeviceService.GetDeviceByIdAsync(irrigationProfile.DeviceId);
        return device?.Type?.ValvePinMap[irrigationProfile.Valve.PinId] ?? "unknown";
    }

}