@page "/plant-profiles"

<PageTitle>Plant-Profiles</PageTitle>

@using IrrigationSystemServer.Models
@using IrrigationSystemServer.Services
@inject PlantProfileService _plantProfileService

<h1>Plant-Profiles</h1>

<NavLink class="nav-link" href="add-plant-profile">
    <span><span class="oi oi-plus"></span> Add new</span>
</NavLink>



@if (_plantProfiles == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Plant-Profile Id</th>
            <th>Name</th>
            <th>Water-Consumption</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var plantProfile in _plantProfiles)
        {
            <tr>
                <td>@plantProfile.PlantProfileId</td>
                <td>@plantProfile.Name</td>
                <td>@plantProfile.WaterConsumption</td>
                <td>
                    <a class="text-decoration-none d-block" role="button">
                        <span><span class="oi oi-pencil" aria-hidden="true"></span> Edit</span>
                    </a>
                    <a class="text-decoration-none d-block mt-2" role="button" @onclick="@(e => DeletePlantProfile(plantProfile))">
                        <span class="oi oi-trash" aria-hidden="true"></span> Delete
                    </a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<PlantProfile>? _plantProfiles;

    protected override async Task OnInitializedAsync()
    {
        _plantProfiles = await _plantProfileService.GetAllPlantProfilesAsync();
    }
    
    private async void DeletePlantProfile(PlantProfile plantProfile)
    {
        await _plantProfileService.DeletePlantProfileAsync(plantProfile);
        _plantProfiles?.Remove(plantProfile);
    }

}